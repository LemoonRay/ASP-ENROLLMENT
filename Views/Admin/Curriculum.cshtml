@model IEnumerable<EnrollmentSystem.Models.Program>

@{
Layout = "~/Views/Shared/_AdminHeader.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Programs - Enrollment System</title>
    <link rel="stylesheet" href="@Url.Content("~/Content/bootstrap.min.css")">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .content-section {
            padding: 30px;
            flex-grow: 1;
            margin-top: 56px; /* Adjust based on header height */
        }

        .program-card {
            background-color: #ffffff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.05);
            margin-bottom: 20px;
        }

        #programDetailsTable {
            display: none;
        }

        .action-buttons button {
            margin-right: 5px;
        }

        .course-search {
            margin-bottom: 15px;
        }

        .course-item {
            padding: 10px;
            border-bottom: 1px solid #eee;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .course-item:hover {
            background-color: #f8f9fa;
        }

        .course-checkbox {
            margin-right: 10px;
        }
    </style>
</head>
<body>


<div class="container content-section">
    <h1 class="mb-4">Manage Curriculum</h1>
    <p class="lead">
        Add, edit, or remove academic programs offered by the institution and view their course offerings by year and semester.
    </p>
    <div class="program-card">
        <h3 class="mb-3">Program Details</h3>
        <div class="row g-3 align-items-end">
            <div class="col-md-6">
                <label for="programSelect" class="form-label">Select Program:</label>
                <select class="form-select" id="programSelect" name="programSelect">
                    <option value="" selected disabled>Choose Program...</option>
                    @if (Model != null && Model.Any())
                    {
                    foreach (var program in Model)
                    {
                    <option value="@program.ProgCode">@program.ProgTitle</option>
                    }
                    }
                    else
                    {
                    <option disabled>No programs found</option>
                    }
                </select>
            </div>
            <div class="col-md-6">
                <label for="yearSemesterSelect" class="form-label">Select Year and Semester:</label>
                <select class="form-select" id="yearSemesterSelect" disabled>
                    <option value="" selected disabled>Choose Year & Semester...</option>
                    @if (ViewBag.YearSemesterOptions != null)
                    {
                    foreach (string option in ViewBag.YearSemesterOptions)
                    {
                    <option value="@option">@option</option>
                    }
                    }
                </select>
            </div>
        </div>
        <div id="programDetailsTable" class="mt-4">
            <h4 id="selectedProgramTitle"></h4>
            <div class="table-responsive">
                <table class="table table-bordered table-striped mt-3">
                    <thead>
                    <tr>
                        <th>Course Code</th>
                        <th>Descriptive Title</th>
                        <th>Co-/Prerequisite</th>
                        <th>Units</th>
                        <th>Lec</th>
                        <th>Lab</th>
                        <th>Total</th>
                        <th>Actions</th>
                    </tr>
                    </thead>
                    <tbody id="programTableBody"></tbody>
                </table>
            </div>
        </div>
        <button class="btn btn-success mt-3" data-bs-toggle="modal" data-bs-target="#assignCourseModal">Assign Course</button>
        <button class="btn btn-primary mt-3 ms-2" id="clearFiltersBtn" style="display:none;">Clear Filters</button>
    </div>
</div>

<!-- Assign Course Modal -->
<div class="modal fade" id="assignCourseModal" tabindex="-1" aria-labelledby="assignCourseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="assignCourseModalLabel">Assign Courses to Program</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Current Program:</label>
                        <p class="fw-bold" id="modalProgramName">-</p>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Year & Semester:</label>
                        <p class="fw-bold" id="modalYearSemester">-</p>
                    </div>
                </div>
                <div class="course-search">
                    <input type="text" class="form-control" id="courseSearch" placeholder="Search courses...">
                </div>
                <div class="course-list-container" style="max-height: 400px; overflow-y: auto;">
                    <table class="table">
                        <thead>
                        <tr>
                            <th width="50px"></th>
                            <th>Course Code</th>
                            <th>Title</th>
                            <th>Units</th>
                        </tr>
                        </thead>
                        <tbody id="availableCoursesList"></tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmAssign">Assign Selected Courses</button>
            </div>
        </div>
    </div>
</div>

<script src="@Url.Content("~/Scripts/jquery-3.6.0.min.js")"></script>
<script src="@Url.Content("~/Scripts/bootstrap.bundle.min.js")"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // --- Header Loading Logic ---
        const headerPath = '../Shared/AdminHeader.html';
        fetch(headerPath)
            .then(response => {
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                return response.text();
            })
            .then(html => {
                document.getElementById('admin-header-placeholder').innerHTML = html;

                const currentPath = window.location.pathname;
                const currentPage = currentPath.substring(currentPath.lastIndexOf('/') + 1);
                const navLinks = document.querySelectorAll('#navbarNavAdmin .nav-link');
                navLinks.forEach(link => {
                    const linkHref = link.getAttribute('href');
                    const linkPage = linkHref.substring(linkHref.lastIndexOf('/') + 1);
                    if (linkPage.toLowerCase() === currentPage.toLowerCase()) {
                        link.classList.add('active');
                        link.setAttribute('aria-current', 'page');
                    } else {
                        link.classList.remove('active');
                        link.removeAttribute('aria-current');
                    }
                });
            })
            .catch(error => {
                console.error('Error loading Admin header:', error);
            });

        const programSelect = document.getElementById('programSelect');
        const yearSemesterSelect = document.getElementById('yearSemesterSelect');
        const programDetailsTable = document.getElementById('programDetailsTable');
        const selectedProgramTitle = document.getElementById('selectedProgramTitle');
        const programTableBody = document.getElementById('programTableBody');
        const clearFiltersBtn = document.getElementById('clearFiltersBtn');
        const assignCourseModal = new bootstrap.Modal(document.getElementById('assignCourseModal'));
        const modalProgramName = document.getElementById('modalProgramName');
        const modalYearSemester = document.getElementById('modalYearSemester');
        const availableCoursesList = document.getElementById('availableCoursesList');
        const courseSearch = document.getElementById('courseSearch');
        const confirmAssignBtn = document.getElementById('confirmAssign');

        const programData = {
            "BSIT": [
                { code: "IT101", title: "Introduction to Computing", prerequisite: "None", units: 3, lec: 3, lab: 0, year: "1st Year", semester: "1st Semester" },
                { code: "IT102", title: "Programming Logic and Design", prerequisite: "None", units: 3, lec: 2, lab: 1, year: "1st Year", semester: "1st Semester" },
                { code: "GE101", title: "Understanding the Self", prerequisite: "None", units: 3, lec: 3, lab: 0, year: "1st Year", semester: "1st Semester" },
                { code: "IT103", title: "Web Development Fundamentals", prerequisite: "IT102", units: 3, lec: 2, lab: 1, year: "1st Year", semester: "2nd Semester" }
            ],
            "BSCS": [
                { code: "CS101", title: "Discrete Structures", prerequisite: "None", units: 3, lec: 3, lab: 0, year: "1st Year", semester: "1st Semester" },
                { code: "CS102", title: "Object-Oriented Programming", prerequisite: "CS101", units: 3, lec: 2, lab: 1, year: "1st Year", semester: "2nd Semester" }
            ],
            "BSA": [
                { code: "ACCTG101", title: "Fundamentals of Accounting", prerequisite: "None", units: 3, lec: 3, lab: 0, year: "1st Year", semester: "1st Semester" }
            ]
        };

        const allCourses = [
            { code: "IT101", title: "Introduction to Computing", units: 3 },
            { code: "IT102", title: "Programming Logic and Design", units: 3 },
            { code: "IT103", title: "Web Development Fundamentals", units: 3 },
            { code: "CS101", title: "Discrete Structures", units: 3 },
            { code: "CS102", title: "Object-Oriented Programming", units: 3 },
            { code: "ACCTG101", title: "Fundamentals of Accounting", units: 3 },
            { code: "GE101", title: "Understanding the Self", units: 3 },
            { code: "GE102", title: "Reading in Philippine History", units: 3 },
            { code: "MATH101", title: "College Algebra", units: 3 },
            { code: "MATH102", title: "Trigonometry", units: 3 },
            { code: "PHYS101", title: "Physics for Engineers", units: 4 },
            { code: "CHEM101", title: "General Chemistry", units: 4 }
        ];

        function updateProgramCourses() {
            const selectedProgramValue = programSelect.value;
            const selectedYearSemesterValue = yearSemesterSelect.value;
            programTableBody.innerHTML = '';
            programDetailsTable.style.display = 'none';

            if (!selectedProgramValue || !selectedYearSemesterValue) {
                selectedProgramTitle.textContent = 'Please select a Program and a Year & Semester.';
                clearFiltersBtn.style.display = 'none';
                return;
            }

            const [selectedYear, selectedSemester] = selectedYearSemesterValue.split(' - ');
            const programName = programSelect.options[programSelect.selectedIndex].text;
            selectedProgramTitle.textContent = `${programName} - ${selectedYearSemesterValue} Courses`;

            const filteredCourses = programData[selectedProgramValue]?.filter(course =>
                course.year === selectedYear && course.semester === selectedSemester) || [];

            if (filteredCourses.length > 0) {
                filteredCourses.forEach(course => {
                    const row = programTableBody.insertRow();
                    row.insertCell().textContent = course.code;
                    row.insertCell().textContent = course.title;
                    row.insertCell().textContent = course.prerequisite;
                    row.insertCell().textContent = course.units;
                    row.insertCell().textContent = course.lec;
                    row.insertCell().textContent = course.lab;
                    row.insertCell().textContent = course.lec + course.lab;

                    const actionsCell = row.insertCell();
                    actionsCell.className = 'action-buttons';

                    const editButton = document.createElement('button');
                    editButton.className = 'btn btn-sm btn-info';
                    editButton.textContent = 'Edit';
                    editButton.onclick = () => {
                        window.location.href = `/Program/Edit?courseCode=${course.code}`;
                    };
                    actionsCell.appendChild(editButton);

                    const deleteButton = document.createElement('button');
                    deleteButton.className = 'btn btn-sm btn-danger';
                    deleteButton.textContent = 'Delete';
                    deleteButton.onclick = () => {
                        if (confirm(`Are you sure you want to delete ${course.code} - ${course.title}?`)) {
                            alert(`${course.code} deleted!`);
                        }
                    };
                    actionsCell.appendChild(deleteButton);
                });
                programDetailsTable.style.display = 'block';
                clearFiltersBtn.style.display = 'inline-block';
            } else {
                selectedProgramTitle.textContent = `No courses found for ${programName} - ${selectedYearSemesterValue}`;
                clearFiltersBtn.style.display = 'inline-block';
            }
        }

        function resetYearSemesterSelect() {
            yearSemesterSelect.value = "";
            yearSemesterSelect.disabled = true;
            programDetailsTable.style.display = 'none';
            programTableBody.innerHTML = '';
            selectedProgramTitle.textContent = '';
            clearFiltersBtn.style.display = 'none';
        }

        function populateAvailableCourses() {
            availableCoursesList.innerHTML = '';
            const searchTerm = courseSearch.value.toLowerCase();
            const selectedProgram = programSelect.value;
            const [selectedYear, selectedSemester] = yearSemesterSelect.value.split(' - ');

            const assignedCourses = programData[selectedProgram]?.filter(c =>
                c.year === selectedYear && c.semester === selectedSemester).map(c => c.code) || [];

            allCourses.filter(course =>
                course.code.toLowerCase().includes(searchTerm) ||
                course.title.toLowerCase().includes(searchTerm))
                .forEach(course => {
                    const isAssigned = assignedCourses.includes(course.code);
                    const row = document.createElement('tr');
                    row.className = 'course-item';
                    if (isAssigned) row.classList.add('table-secondary');
                    row.innerHTML = `
                        <td><input type="checkbox" class="course-checkbox" ${isAssigned ? 'disabled' : ''} data-code="${course.code}"></td>
                        <td>${course.code}</td>
                        <td>${course.title}</td>
                        <td>${course.units}</td>`;
                    availableCoursesList.appendChild(row);
                });
        }

        programSelect.addEventListener('change', function () {
            if (this.value) {
                yearSemesterSelect.disabled = false;
                yearSemesterSelect.value = "";
            } else {
                resetYearSemesterSelect();
            }
            updateProgramCourses();
        });

        yearSemesterSelect.addEventListener('change', updateProgramCourses);

        clearFiltersBtn.addEventListener('click', function () {
            programSelect.value = "";
            resetYearSemesterSelect();
            updateProgramCourses();
        });

        document.querySelector('[data-bs-target="#assignCourseModal"]').addEventListener('click', function () {
            if (!programSelect.value || !yearSemesterSelect.value) {
                alert('Please select a Program and Year/Semester first');
                return false;
            }
            modalProgramName.textContent = programSelect.options[programSelect.selectedIndex].text;
            modalYearSemester.textContent = yearSemesterSelect.value;
            populateAvailableCourses();
            assignCourseModal.show();
        });

        courseSearch.addEventListener('input', populateAvailableCourses);

        confirmAssignBtn.addEventListener('click', function () {
            const selectedProgram = programSelect.value;
            const [selectedYear, selectedSemester] = yearSemesterSelect.value.split(' - ');
            const selectedCourses = Array.from(document.querySelectorAll('.course-checkbox:checked')).map(cb => cb.dataset.code);

            if (selectedCourses.length === 0) {
                alert('Please select at least one course to assign');
                return;
            }

            selectedCourses.forEach(courseCode => {
                const course = allCourses.find(c => c.code === courseCode);
                if (course && !programData[selectedProgram]) {
                    programData[selectedProgram] = [];
                }
                if (course) {
                    programData[selectedProgram].push({
                        code: course.code,
                        title: course.title,
                        prerequisite: "None",
                        units: course.units,
                        lec: course.units,
                        lab: 0,
                        year: selectedYear,
                        semester: selectedSemester
                    });
                }
            });

            alert(`${selectedCourses.length} course(s) assigned successfully!`);
            assignCourseModal.hide();
            updateProgramCourses();
        });

        resetYearSemesterSelect();

    });
</script>

</body>
</html>