@{
    Layout = null;
    ViewBag.Title = "Admin Login";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    <link rel="stylesheet" href="~/Content/bootstrap.min.css">
    <style>
        body {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #f8f9fa;
        }
        .login-header-nav-wrapper {
            width: 100%;
            background-color: #e9ecef;
            padding: 15px 0;
            box-shadow: 0 2px 4px rgba(0,0,0,.05);
            margin-bottom: 30px;
            position: absolute;
            top: 0;
            left: 0;
        }
        .login-header-nav {
            max-width: 400px;
            margin: 0 auto;
            text-align: center;
        }
        .login-header-nav a {
            padding: 0 10px;
            text-decoration: none;
            color: #007bff;
            font-weight: 500;
        }
        .login-header-nav a.active {
            color: #343a40;
            font-weight: 700;
            cursor: default;
        }
        .login-header-nav a:not(.active):hover {
            text-decoration: underline;
        }
        .login-container {
            background-color: #ffffff;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
            margin-top: 80px;
        }
    </style>
</head>
<body>
<div class="login-header-nav-wrapper">
    <div class="login-header-nav">

        <a href="@Url.Action("Login", "Login")" >Student</a> |
        @* <a href="@Url.Action("Login", "Login")" *@
        <a href="@Url.Action("LoginTeacher", "Login")">Teacher</a> |
        <a href="@Url.Action("LoginHead", "Login")">Program Head</a> |
        <a class="active">Admin</a>
    </div>
</div>

<div class="login-container">
    <h2 class="text-center mb-4">Admin Login</h2>

    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage as string))
    {
        <div class="alert alert-danger text-center">
            @ViewBag.ErrorMessage
        </div>
    }

    @using (Html.BeginForm("LoginAdmin", "Account", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
    {
        @Html.AntiForgeryToken()

        <div class="mb-3">
            @Html.Label("adminId", "Admin ID", new { @class = "form-label" })
            @Html.TextBox("adminId", null, new { @class = "form-control", placeholder = "Enter Admin ID", required = "required" })
            <div class="invalid-feedback">
                Please enter your Admin ID
            </div>
        </div>
        <div class="mb-3">
            @Html.Label("password", "Password", new { @class = "form-label" })
            @Html.Password("password", null, new { @class = "form-control", placeholder = "Enter Password", required = "required" })
            <div class="invalid-feedback">
                Please enter your password
            </div>
        </div>
        <button type="submit" class="btn btn-primary w-100">Login</button>
    }
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    // Client-side validation
    (function () {
        'use strict'

        var forms = document.querySelectorAll('.needs-validation')

        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
    })()
</script>
</body>
</html>